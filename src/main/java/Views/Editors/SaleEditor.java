/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Views.Editors;

import Controllers.ClientController;
import Controllers.ProductController;
import Controllers.SaleController;
import Entities.ApplicationContext;
import Entities.Client;
import Entities.Product;
import Utils.ViewUtils;
import Views.Panes.JpnSales;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author Ellian
 */
public class SaleEditor extends javax.swing.JDialog {
    private SaleController controller;
    private ProductController productController;
    private ClientController clientController;
    
    private ArrayList shoppingCart;
    /**
     * Creates new form SaleEditor
     */
    public SaleEditor(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        controller = ApplicationContext.getInstance().getSaleController();
        productController = ApplicationContext.getInstance().getProductController();
        clientController = ApplicationContext.getInstance().getClientController();
        shoppingCart = new ArrayList<Integer>();
        initComponents();
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int width = (int)Math.round(screenSize.width*0.5);
        int heigh = (int) Math.round(screenSize.height*0.5);
        setSize(width,heigh);
        setLocationRelativeTo(null);
        
        setMappings();
        
        cartManipulationListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        searchVar = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        clientComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        shoppingCartTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        removeProductButton = new javax.swing.JButton();
        addProductButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        sellButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        sellDate = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nova venda");

        btnSearch.setText("ðŸ”Ž");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        searchVar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nome", "ID" }));

        jLabel2.setText("Estoque:");

        stockTable.setModel(productController.getFilledTableModel());
        jScrollPane1.setViewportView(stockTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchVar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch))
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchVar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch)
                            .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.WEST);

        jLabel3.setText("Cliente:");

        clientComboBox.setModel(clientController.getFilledComboBoxModel());

        shoppingCartTable.setModel(productController.getShoppingCartFilledTableModel(null));
        shoppingCartTable.setCellSelectionEnabled(true);
        shoppingCartTable.getTableHeader().setResizingAllowed(false);
        shoppingCartTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(shoppingCartTable);

        jLabel4.setText("Valor total:");

        jLabel5.setText("R$: 00000");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.EAST);

        removeProductButton.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        removeProductButton.setText("<");
        removeProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProductButtonActionPerformed(evt);
            }
        });

        addProductButton.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        addProductButton.setText(">");
        addProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeProductButton, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                    .addComponent(addProductButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(182, Short.MAX_VALUE)
                .addComponent(addProductButton)
                .addGap(18, 18, 18)
                .addComponent(removeProductButton)
                .addGap(185, 185, 185))
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jButton1.setText("Sair");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        sellButton.setText("Concluir");
        sellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Data da venda:");

        sellDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyy"))));
        sellDate.setToolTipText("Utilize alt+clique para adicionar a data de hoje.");
        sellDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sellDateMouseClicked(evt);
            }
        });
        sellDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sellDate, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 595, Short.MAX_VALUE)
                .addComponent(sellButton)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sellButton)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(sellDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        sellButton.putClientProperty( "FlatLaf.style","borderColor:#7FFF00;background:#D0F0C0;borderWidth:2");

        getContentPane().add(jPanel4, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButtonActionPerformed
        if (shoppingCart.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selecione ao menos um produto.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Integer clientId = ((Client)clientComboBox.getSelectedItem()).getId();
        if (clientId == null) {
            JOptionPane.showMessageDialog(this, "Selecione um cliente.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (sellDate.getValue() == null){
            JOptionPane.showMessageDialog(this, "Preencha a data da venda..", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Map productMap = buildProductCartMap();
        int sellerId = ApplicationContext.getInstance().getActiveUser().getId();
        String date = sellDate.getText();
        boolean sucess = controller.saveSale(clientId,sellerId,productMap,date);

        if (!sucess) {
                JOptionPane.showMessageDialog(null, "Erro desconhecido ao salvar fornecedor!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
        JOptionPane.showMessageDialog(this, "Venda realizada!", "Sucesso", JOptionPane.PLAIN_MESSAGE);
        //jtbList.setModel(controller.getShoppingCartFilledTableModel());
//        editingClient=null;
//        ViewUtils.clearFields(this);
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_sellButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void addProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProductButtonActionPerformed
        Integer selectedItem = ViewUtils.getSelectedListItemId(stockTable);
        if(selectedItem == null) {
            JOptionPane.showMessageDialog(this, "Selecione um produto!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        shoppingCart.add(selectedItem);
        updateCart();
        stockTable.setModel(productController.getFilledTableModel(true, getProductSearchExpression()));
    }//GEN-LAST:event_addProductButtonActionPerformed

    private void removeProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProductButtonActionPerformed
        Integer selectedItem = ViewUtils.getSelectedListItemId(shoppingCartTable);
        if(selectedItem == null) {
            JOptionPane.showMessageDialog(this, "Selecione um produto!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        shoppingCart.remove(selectedItem);
        updateCart();
        stockTable.setModel(productController.getFilledTableModel(true, getProductSearchExpression()));
    }//GEN-LAST:event_removeProductButtonActionPerformed

    private void sellDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sellDateActionPerformed

    private void sellDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sellDateMouseClicked
        if (evt.isAltDown()) {
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            String dataAtual = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            Date data = null;
            try {
                data = dateFormat.parse(dataAtual);
            } catch (ParseException ex) {
                Logger.getLogger(SaleEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
            sellDate.setValue(data);
        }
    }//GEN-LAST:event_sellDateMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        stockTable.setModel(productController.getFilledTableModel(true, getProductSearchExpression()));
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProductButton;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> clientComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeProductButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JComboBox<String> searchVar;
    private javax.swing.JButton sellButton;
    private javax.swing.JFormattedTextField sellDate;
    private javax.swing.JTable shoppingCartTable;
    private javax.swing.JTable stockTable;
    // End of variables declaration//GEN-END:variables

    public DefaultFormatterFactory getCurrencyFormatter() {
        DecimalFormat formato = new DecimalFormat("#,##0.00");
        formato.setGroupingUsed(true); // separador de milhar
        formato.setRoundingMode(RoundingMode.HALF_UP);

        NumberFormatter formatter = new NumberFormatter(formato);
        formatter.setValueClass(Double.class);
        formatter.setAllowsInvalid(false); // impede letras e entrada invÃ¡lida
        formatter.setMinimum(0.0); // se quiser restringir a nÃºmeros positivos

        return new DefaultFormatterFactory(formatter);
    }
    
    private void updateCart(){        
        shoppingCartTable.setModel(productController.getShoppingCartFilledTableModel(shoppingCart));
        cartManipulationListener();
    }
   
    private String getProductSearchExpression() {
        String clause = "";
        String column = searchVar.getSelectedItem().toString().toLowerCase();
        String value = searchField.getText().toString().toLowerCase();
        String cartString = shoppingCart.toString();
        
        if ("id".equals(column) && !value.isBlank()) {
            if (!shoppingCart.contains(value)) {
                clause = "id = "+value;
            } else {
                clause = "id = 0";
            }
        } else if (!value.isBlank()){
            clause = "lower(name) like '%"+value+"%'";
        }
        if (!shoppingCart.isEmpty()) {
            if (!clause.isBlank() && !clause.contains("AND")) {
                clause +=" AND";
            }
            clause+=" id NOT IN ("+cartString.substring(1,cartString.length()-1)+")";
        }
        return clause;    
    }
    
    private void setMappings() {
        KeyStroke F5 = KeyStroke.getKeyStroke("F5");
        InputMap inputMap = btnSearch.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap actionMap = btnSearch.getActionMap();

        inputMap.put(F5, "clickButton");
        actionMap.put("clickButton", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnSearch.doClick(); // simula clique
            }
        });
    }
    
    private void cartManipulationListener() {
        shoppingCartTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        DefaultTableModel tableModel = (DefaultTableModel) shoppingCartTable.getModel();

        tableModel.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int row = e.getFirstRow();
                    int editedColumn = e.getColumn();
                    
                    double originalValue = productController.getProductOriginalValue((Integer) tableModel.getValueAt(row, 0));

                    if (editedColumn == 4) {
                        int quantity = 1;
                        try {
                            quantity = Integer.parseInt(tableModel.getValueAt(row, editedColumn).toString());
                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(jPanel1.getParent(), "Insira um valor inteiro!");
                        }
                        tableModel.setValueAt(quantity*originalValue, row, 3);
                    }
                }
            }
        });
    }
    
    private Map buildProductCartMap(){
        Map<Integer, double[]> outputMap = new HashMap<>();
        
        DefaultTableModel model = (DefaultTableModel) shoppingCartTable.getModel();
        int rowCount = model.getRowCount();
        for (int i =0;i<rowCount;i++) {
            double[] tmp = new double[2];
            
            int productId = Integer.parseInt(model.getValueAt(i,4).toString());
            double quantity = Double.parseDouble(model.getValueAt(i,4).toString());
            double value = Double.parseDouble(model.getValueAt(i,3).toString());
            
            tmp[0] = quantity;
            tmp[1] = value;
            outputMap.put(productId, tmp);
        }        
        
        return outputMap;
    }
}
