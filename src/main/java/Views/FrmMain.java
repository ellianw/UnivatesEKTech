/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views;

import Views.Components.PasswordChangeDialog;
import Views.Panes.JpnClients;
import Views.Panes.JpnSales;
import Views.Panes.JpnProducts;
import Views.Panes.ImagePanel;
import Views.Editors.SaleEditor;
import Views.Editors.ClientEditor;
import Views.Editors.ProductEditor;
import Controllers.ReportController;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Ellian
 */
public class FrmMain extends javax.swing.JFrame {
    private JPanel currentPane = null;
    private ReportController reportController;
    /**
     * Creates new form FrmMain
     */
    public FrmMain() {
        initComponents();
        setLayout(new BorderLayout());   
        createBackgroundPane();
        try {
            setIconImage(ImageIO.read(getClass().getResource("/content/icon.png")));
        } catch (Exception e) {
            System.out.println("Error loading frame icon: "+e);
        }
        reportController = new ReportController();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        saleMenu = new javax.swing.JMenu();
        listSalesMenuItem = new javax.swing.JMenuItem();
        newSaleMenuItem = new javax.swing.JMenuItem();
        clientMenu = new javax.swing.JMenu();
        listClientMenuItem = new javax.swing.JMenuItem();
        clientRegisterMenuItem = new javax.swing.JMenuItem();
        productMenu = new javax.swing.JMenu();
        listProductMenuItem = new javax.swing.JMenuItem();
        productRegisterMenuItem = new javax.swing.JMenuItem();
        userMenu = new javax.swing.JMenu();
        changePassword = new javax.swing.JMenuItem();
        manageUsers = new javax.swing.JMenuItem();
        reportMenu = new javax.swing.JMenu();
        clientReportMenuItem = new javax.swing.JMenuItem();
        productReportMenuItem = new javax.swing.JMenuItem();
        saleReportMenuItem = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EK Tech");
        getContentPane().setLayout(new java.awt.FlowLayout());

        saleMenu.setText("Vendas");

        listSalesMenuItem.setText("Listar");
        listSalesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listSalesMenuItemActionPerformed(evt);
            }
        });
        saleMenu.add(listSalesMenuItem);

        newSaleMenuItem.setText("Nova");
        newSaleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSaleMenuItemActionPerformed(evt);
            }
        });
        saleMenu.add(newSaleMenuItem);

        jMenuBar1.add(saleMenu);

        clientMenu.setText("Clientes");

        listClientMenuItem.setText("Listar");
        listClientMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listClientMenuItemActionPerformed(evt);
            }
        });
        clientMenu.add(listClientMenuItem);

        clientRegisterMenuItem.setText("Cadastrar");
        clientRegisterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientRegisterMenuItemActionPerformed(evt);
            }
        });
        clientMenu.add(clientRegisterMenuItem);

        jMenuBar1.add(clientMenu);

        productMenu.setText("Produtos");

        listProductMenuItem.setText("Listar");
        listProductMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listProductMenuItemActionPerformed(evt);
            }
        });
        productMenu.add(listProductMenuItem);

        productRegisterMenuItem.setText("Cadastro");
        productRegisterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productRegisterMenuItemActionPerformed(evt);
            }
        });
        productMenu.add(productRegisterMenuItem);

        jMenuBar1.add(productMenu);

        userMenu.setText("Usuários");

        changePassword.setText("Alterar senha");
        changePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordActionPerformed(evt);
            }
        });
        userMenu.add(changePassword);

        manageUsers.setText("Gerenciar usuários");
        manageUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageUsersActionPerformed(evt);
            }
        });
        userMenu.add(manageUsers);

        jMenuBar1.add(userMenu);

        reportMenu.setText("Relatórios");

        clientReportMenuItem.setText("Relatório de Clientes");
        clientReportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientReportMenuItemActionPerformed(evt);
            }
        });
        reportMenu.add(clientReportMenuItem);

        productReportMenuItem.setText("Relatório de Produtos");
        productReportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productReportMenuItemActionPerformed(evt);
            }
        });
        reportMenu.add(productReportMenuItem);

        saleReportMenuItem.setText("Relatório de Vendas");
        saleReportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saleReportMenuItemActionPerformed(evt);
            }
        });
        reportMenu.add(saleReportMenuItem);

        jMenuBar1.add(reportMenu);

        exitMenu.setText("Sair");

        exitMenuItem.setText("Sair");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        exitMenu.add(exitMenuItem);

        jMenuBar1.add(exitMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void listClientMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listClientMenuItemActionPerformed
        createClientPane();
    }//GEN-LAST:event_listClientMenuItemActionPerformed

    private void productRegisterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productRegisterMenuItemActionPerformed
        ProductEditor editor = new ProductEditor(this,true);
        editor.setVisible(true);
        editor.setLocationRelativeTo(null);    
    }//GEN-LAST:event_productRegisterMenuItemActionPerformed

    private void newSaleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSaleMenuItemActionPerformed
        SaleEditor editor = new SaleEditor(this,true);
        editor.setVisible(true);
    }//GEN-LAST:event_newSaleMenuItemActionPerformed

    private void listProductMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listProductMenuItemActionPerformed
        createProductPane();
    }//GEN-LAST:event_listProductMenuItemActionPerformed

    private void clientRegisterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientRegisterMenuItemActionPerformed
        ClientEditor editor = new ClientEditor(this,true);
        editor.setLocationRelativeTo(null);
        editor.setVisible(true);
    }//GEN-LAST:event_clientRegisterMenuItemActionPerformed

    private void listSalesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listSalesMenuItemActionPerformed
        createSalesPane();
    }//GEN-LAST:event_listSalesMenuItemActionPerformed

    private void changePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordActionPerformed
         PasswordChangeDialog editor = new PasswordChangeDialog(this, true);
         editor.setLocationRelativeTo(null);
         editor.setVisible(true);
    }//GEN-LAST:event_changePasswordActionPerformed

    private void productReportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productReportMenuItemActionPerformed
        reportController.buildProductsReport();
    }//GEN-LAST:event_productReportMenuItemActionPerformed

    private void clientReportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientReportMenuItemActionPerformed
        reportController.buildClientsReport();
    }//GEN-LAST:event_clientReportMenuItemActionPerformed

    private void saleReportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saleReportMenuItemActionPerformed
        reportController.buildSalesReport();
    }//GEN-LAST:event_saleReportMenuItemActionPerformed

    private void manageUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageUsersActionPerformed
        JOptionPane.showMessageDialog(this, "Funcionalidade não disponível!", "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }//GEN-LAST:event_manageUsersActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem changePassword;
    private javax.swing.JMenu clientMenu;
    private javax.swing.JMenuItem clientRegisterMenuItem;
    private javax.swing.JMenuItem clientReportMenuItem;
    private javax.swing.JMenu exitMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem listClientMenuItem;
    private javax.swing.JMenuItem listProductMenuItem;
    private javax.swing.JMenuItem listSalesMenuItem;
    private javax.swing.JMenuItem manageUsers;
    private javax.swing.JMenuItem newSaleMenuItem;
    private javax.swing.JMenu productMenu;
    private javax.swing.JMenuItem productRegisterMenuItem;
    private javax.swing.JMenuItem productReportMenuItem;
    private javax.swing.JMenu reportMenu;
    private javax.swing.JMenu saleMenu;
    private javax.swing.JMenuItem saleReportMenuItem;
    private javax.swing.JMenu userMenu;
    // End of variables declaration//GEN-END:variables
    
    public void createClientPane(){
        clearFrame(false);
        if (currentPane == null) {
            currentPane = new JpnClients();
            getContentPane().add(currentPane,BorderLayout.CENTER);
            revalidate();
        }
    }

    public void createProductPane(){
        clearFrame(false);
        if (currentPane == null) {
            currentPane = new JpnProducts();
            getContentPane().add(currentPane,BorderLayout.CENTER);
            getContentPane().revalidate();
        }
    }    
    
    public void createSalesPane(){
        clearFrame(false);
        if (currentPane == null) {
            currentPane = new JpnSales();
            getContentPane().add(currentPane,BorderLayout.CENTER);
            getContentPane().revalidate();
        }    
    }
    
    public void clearFrame(boolean createBackground){
        Component[] components = getContentPane().getComponents();
        for (Component c : components) {
            if (c instanceof ImagePanel) {
                remove(c);
                break;
            }   
            remove(currentPane);
        }
        if (createBackground){
            createBackgroundPane();
        }
        revalidate();
        repaint();
        currentPane = null;
    }
    
    private void createBackgroundPane() {
        try {
            InputStream is = getClass().getResourceAsStream("/content/logo.png");
            BufferedImage myImage = ImageIO.read(is);
            getContentPane().add(new ImagePanel(myImage),BorderLayout.CENTER); 
        } catch (Exception e) {
            System.out.println("Erro carregando imagem de fundo: "+e);
        }
    }
}
